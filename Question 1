// Libraries
#include <stdio.h>
#include <stdbool.h> 

// Constants
#define SIZE 12
#define nRows 4
#define nCols 3

// prototypes
void print_array(const int array[], int length); 
void print_matrix(const int mat[][nCols], int rows);
void set_array(int arr[], int length); 
bool isValid(int length, int pos); 
void remove_element(int arr[], int *length, int pos); 
void insert_element(int arr[], int *length, int pos, int value); 
void reshape(const int arr[], int length, int arr2d[nRows][nCols]); 
void trans_matrix(const int arr2d[nRows][nCols]); 
bool found_duplicate(const int arr[], int length);

// Main function
int main() {
    int arr[SIZE];
    int arr2d[nRows][nCols];
    int current_size = SIZE;

    // Set initial array
    set_array(arr, SIZE);
    printf("Initial array:\n");
    print_array(arr, current_size);

    // Remove element
    int remove_pos = 5;
    remove_element(arr, &current_size, remove_pos);
    printf("\nAfter removing element at position %d:\n", remove_pos);
    print_array(arr, current_size);

    // Insert element
    int new_element = 66;
    int insert_pos = 7;
    insert_element(arr, &current_size, insert_pos, new_element);
    printf("\nAfter inserting %d at position %d:\n", new_element, insert_pos);
    print_array(arr, current_size);

    // Reshape array into 2D matrix
    reshape(arr, current_size, arr2d);
    printf("\nReshaped 2D array:\n");
    print_matrix(arr2d, nRows);

    // Print columns of the matrix
    printf("\nMatrix columns (transposed):\n");
    trans_matrix(arr2d);

    // Check for duplicates
    printf("\nDuplicate check:\n");
    found_duplicate(arr, current_size);

    return 0;
}

// Function Definitions

void print_array(const int array[], int length) {
    for (int i = 0; i < length; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

void print_matrix(const int mat[][nCols], int rows) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < nCols; j++) {
            printf("%d ", mat[i][j]);
        }
        printf("\n");
    }
}

void set_array(int arr[], int length) {
    for (int i = 0; i < length; i++) {
        arr[i] = i;
    }
}

bool isValid(int length, int pos) {
    return pos >= 0 && pos < length;
}

void remove_element(int arr[], int *length, int pos) {
    if (isValid(*length, pos)) {
        for (int i = pos; i < *length - 1; i++) {
            arr[i] = arr[i + 1];
        }
        (*length)--;
    } else {
        printf("Error: Invalid index %d.\n", pos);
    }
}

void insert_element(int arr[], int *length, int pos, int value) {
    if (isValid(*length + 1, pos)) {
        for (int i = *length; i > pos; i--) {
            arr[i] = arr[i - 1];
        }
        arr[pos] = value;
        (*length)++;
    } else {
        printf("Error: Invalid index %d.\n", pos);
    }
}

void reshape(const int arr[], int length, int arr2d[nRows][nCols]) {
    if (length != nRows * nCols) {
        printf("Error: Array length does not match matrix dimensions.\n");
        return;
    }
    int position = 0;
    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            arr2d[i][j] = arr[position++];
        }
    }
}

void trans_matrix(const int arr2d[nRows][nCols]) {
    for (int j = 0; j < nCols; j++) {
        for (int i = 0; i < nRows; i++) {
            printf("%d ", arr2d[i][j]);
        }
        printf("\n");
    }
}

bool found_duplicate(const int arr[], int length) {
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            if (arr[i] == arr[j]) {
                printf("Duplicate found: %d\n", arr[i]);
                return true;
            }
        }
    }
    printf("No duplicates found.\n");
    return false;
}



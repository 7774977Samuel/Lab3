#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define TEAMS 3
#define CLUBSIZE 5
#define MAX_NAME_LENGTH 25

// Structure definitions
typedef struct {
    int day;
    int month;
    int year;
} age_t;

typedef struct {
    char name[MAX_NAME_LENGTH];
    int kit_number;
    age_t dob;
    char position[MAX_NAME_LENGTH];
} player_t;

typedef struct {
    char name[MAX_NAME_LENGTH];
    player_t players[CLUBSIZE];
    int active_size;
} team_t;

// Global variables
team_t teams[TEAMS];
int team_count = 0; // Counter for total teams

// Function prototypes
void display_menu();
void add_club();
void search_update();
void add_player();
void display_clubs();
void handle_error(const char *message);

// Main function
int main() {
    int choice;

    while (1) {
        display_menu();
        printf("Enter your choice: ");
        if (scanf("%d", &choice) != 1) {
            handle_error("Invalid input.");
            break;
        }

        // Switch for menu
        switch (choice) {
            case 1:
                add_club();
                break;
            case 2:
                add_player();
                break;
            case 3:
                display_clubs();
                break;
            case 4:
                search_update();
                break;
            default:
                printf("Exiting program.\n");
                exit(0);
        }
    }
    return 0;
}

// Function to display the menu
void display_menu() {
    printf("\nFootball Team Application\n");
    printf("1. Add a new club\n");
    printf("2. add a player to a club\n");
    printf("3. Display all teams and players\n");
    printf("4. search and update player details\n");
    printf("5. Exit\n");
}

// Function to add a new club
void add_club() {
    if (team_count >= TEAMS) {
        handle_error("Maximum number of teams reached.");
        return;
    }

    printf("Enter the name of the club: ");
    scanf(" %[^\n]", teams[team_count].name);
    teams[team_count].active_size = 0;
    team_count++; // Increment the number of teams
    printf("Club enrolled successfully.\n");
}

// Function to display all clubs and their players
void display_clubs() {
    if (team_count == 0) {
        printf("No clubs to display.\n");
        return;
    }

    printf("\nClub Details\n");
    for (int i = 0; i < team_count; i++) {
        printf("Club: %s\n", teams[i].name);
        printf("Players:\n");

        if (teams[i].active_size == 0) {
            printf("  No players in this club.\n");
            continue;
        }

        for (int j = 0; j < teams[i].active_size; j++) {
            printf("  Name: %s, Kit: %d, DOB: %02d-%02d-%04d, Position: %s\n",
                   teams[i].players[j].name,
                   teams[i].players[j].kit_number,
                   teams[i].players[j].dob.day,
                   teams[i].players[j].dob.month,
                   teams[i].players[j].dob.year,
                   teams[i].players[j].position);
        }
        printf("\n");
    }
}

// Function to add a player to a club
void add_player() {
    if (team_count == 0) {
        handle_error("No clubs enrolled.");
        return;
    }
    printf("Select the club to add a player:\n");
    for (int i = 0; i < team_count; i++) {
        printf("%d. %s\n", i + 1, teams[i].name);
    }
    int team_index;
    printf("Enter your choice: ");
    if (scanf("%d", &team_index) != 1 || team_index < 1 || team_index > team_count) {
        handle_error("Invalid input.");
        return;
    }
    team_index--; // Adjust for 0-based index

    if (teams[team_index].active_size >= CLUBSIZE) {
        handle_error("Squad is full for this team.");
        return;
    }
    int player_index = teams[team_index].active_size;

    printf("enter player name: ");
    scanf(" %[^\n]", teams[team_index].players[player_index].name);

    printf("Enter kit number: ");
    scanf("%d", &teams[team_index].players[player_index].kit_number);

    printf("enter date of birth (dd mm yyyy): ");
    scanf("%d %d %d",
          &teams[team_index].players[player_index].dob.day,
          &teams[team_index].players[player_index].dob.month,
          &teams[team_index].players[player_index].dob.year);

    printf("Enter position: ");
    scanf(" %[^\n]", teams[team_index].players[player_index].position);

    teams[team_index].active_size++;
    printf("Player added successfully.\n");
}
// Function to search for and update player details
void search_update() {
    char search_name[MAX_NAME_LENGTH] = "";
    int search_kit = -1;

    printf("enter player name or press enter to skip: ");
    getchar(); // Clear buffer
    fgets(search_name, MAX_NAME_LENGTH, stdin);
    if (search_name[strlen(search_name) - 1] == '\n') {
        search_name[strlen(search_name) - 1] = '\0'; // Remove newline
    }

    printf("Enter kit number or press -1 to skip: ");
    scanf("%d", &search_kit);

    for (int i = 0; i < team_count; i++) {
        for (int j = 0; j < teams[i].active_size; j++) {
            if ((strlen(search_name) > 0 && strcasecmp(teams[i].players[j].name, search_name) == 0) ||
                (search_kit != -1 && teams[i].players[j].kit_number == search_kit)) {
                printf("\nPlayer found:\n");
                printf("  Name: %s, Kit: %d, DOB: %02d-%02d-%04d, Position: %s\n",
                       teams[i].players[j].name,
                       teams[i].players[j].kit_number,
                       teams[i].players[j].dob.day,
                       teams[i].players[j].dob.month,
                       teams[i].players[j].dob.year,
                       teams[i].players[j].position);
                printf("Update player details? y or n: ");
                char update_choice;
                getchar(); // Clear buffer
                scanf("%c", &update_choice);
                if (tolower(update_choice) == 'y') {
                    printf("Enter new name or press enter to keep current details: ");
                    getchar(); // Clear buffer
                    fgets(search_name, MAX_NAME_LENGTH, stdin);
                    if (search_name[strlen(search_name) - 1] == '\n') {
                        search_name[strlen(search_name) - 1] = '\0';
                    }
                    if (strlen(search_name) > 0) {
                        strcpy(teams[i].players[j].name, search_name);
                    }
                    printf("Enter new kit number or press -1 to skip: ");
                    scanf("%d", &search_kit);
                    if (search_kit != -1) {
                        teams[i].players[j].kit_number = search_kit;
                    }
                    printf("enter new DOB (dd mm yyyy), or 0 0 0 to skip: ");
                    int day, month, year;
                    scanf("%d %d %d", &day, &month, &year);
                    if (day > 0 && month > 0 && year > 0) {
                        teams[i].players[j].dob.day = day;
                        teams[i].players[j].dob.month = month;
                        teams[i].players[j].dob.year = year;
                    }
                    printf("Enter new position or press enter to keep current details: ");
                    getchar(); // Clear buffer
                    fgets(search_name, MAX_NAME_LENGTH, stdin);
                    if (search_name[strlen(search_name) - 1] == '\n') {
                        search_name[strlen(search_name) - 1] = '\0';
                    }
                    if (strlen(search_name) > 0) {
                        strcpy(teams[i].players[j].position, search_name);
                    }
                    printf("Player details updated successfully.\n");
                }
                return;
            }
        }
    }
    printf("Player not found.\n");
}
// Function to handle errors
void handle_error(const char *message) {
    printf("Error: %s\n", message);
}
